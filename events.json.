<!doctype html>
<html lang="es">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Diagnóstico JS / Supabase</title>
<style>
  body{font-family:Inter,system-ui,Arial;margin:18px;background:#f6faf0;color:#062022}
  .box{background:#fff;border:1px solid #e6eef0;padding:14px;border-radius:10px;max-width:900px}
  h1{margin:0 0 8px;font-size:18px}
  pre{background:#0b1020;color:#e6ffee;padding:12px;border-radius:8px;overflow:auto}
  .ok{color:green;font-weight:700}
  .err{color:#b00020;font-weight:700}
  .line{margin:8px 0;padding:8px;border-radius:6px;background:#fbfffc}
  button{padding:8px 12px;border-radius:8px;border:1px solid #cfe8d0;background:#eaffd6;cursor:pointer}
</style>
</head>
<body>
  <div class="box">
    <h1>Diagnóstico de JavaScript &amp; Supabase</h1>
    <p>Este archivo comprobará si tu navegador ejecuta JS y si puede cargar el SDK de Supabase.</p>

    <div class="line"><strong>Estado JS:</strong> <span id="jsStatus">—</span></div>
    <div class="line"><strong>SDK supabase (CDN):</strong> <span id="sdkStatus">—</span></div>
    <div class="line"><strong>createClient disponible:</strong> <span id="createStatus">—</span></div>
    <div class="line"><strong>Prueba crear cliente:</strong> <span id="clientStatus">—</span></div>

    <p style="margin-top:12px">
      <button id="btnRetry">Reintentar carga del SDK</button>
      <button id="btnConsole">Mostrar logs en consola</button>
    </p>

    <h3>Instrucciones rápidas</h3>
    <ol>
      <li>Abre DevTools → <strong>Console</strong>.</li>
      <li>Carga este archivo (mejor servirlo por <code>http://localhost</code> con <code>npx serve .</code> o Live Server). Si usas <code>file://</code> el test igual funciona pero algunos navegadores bloquean recursos externos.</li>
      <li>Si ves errores sobre bloqueo de recursos (CSP / adblock), desactiva extensiones de bloqueo y vuelve a probar.</li>
      <li>Si no ves cambios en la pantalla o en la consola, pega aquí el texto que aparece en la consola (errores en rojo).</li>
    </ol>

    <h3>Salida cruda</h3>
    <pre id="out" style="height:180px"></pre>
  </div>

<script>
(function(){
  const out = document.getElementById('out');
  function logLine(msg){ out.textContent += msg + "\\n"; console.log(msg); }
  function setEl(id, txt, cls='') { const el = document.getElementById(id); if(el){ el.textContent = txt; el.className = cls; } }

  // 1) Verificamos que JS corre
  try{
    setEl('jsStatus','Ejecutando ✅','ok');
    logLine('[BOOT] JavaScript ejecutándose en esta página.');
  }catch(e){
    setEl('jsStatus','No ejecutado ❌','err');
    logLine('[BOOT] ERROR: JS no ejecutado: ' + e);
    return;
  }

  // 2) Intento de detectar createClient sin cargar CDN
  const haveCreate = (typeof createClient === 'function') || (window.supabase && typeof window.supabase.createClient === 'function');
  setEl('createStatus', haveCreate ? 'Sí' : 'No', haveCreate ? 'ok' : 'err');
  logLine('[BOOT] createClient detectable: ' + haveCreate);

  // 3) Función para cargar SDK dinámicamente si hace falta
  async function loadSdk(timeout=6000){
    return new Promise((resolve)=>{
      if((typeof createClient === 'function') || (window.supabase && typeof window.supabase.createClient === 'function')){
        setEl('sdkStatus','Ya disponible (no se cargó CDN).','ok');
        logLine('[BOOT] SDK ya presente, no se cargó CDN.');
        return resolve(true);
      }
      logLine('[BOOT] Intentando cargar SDK desde CDN...');
      setEl('sdkStatus','Cargando desde CDN...');
      const s = document.createElement('script');
      s.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/dist/supabase.min.js';
      s.async = true;
      let done = false;
      const to = setTimeout(()=>{ if(!done){ done=true; setEl('sdkStatus','Timeout cargando SDK','err'); logLine('[BOOT] Timeout cargando SDK'); resolve(false); }}, timeout);
      s.onload = ()=>{ if(done) return; done=true; clearTimeout(to); setEl('sdkStatus','Cargado OK ✅','ok'); logLine('[BOOT] SDK cargado (onload)'); resolve(true); };
      s.onerror = ()=>{ if(done) return; done=true; clearTimeout(to); setEl('sdkStatus','Error cargando SDK (network/CSP/adblock)','err'); logLine('[BOOT] Error cargando SDK (onerror)'); resolve(false); };
      document.head.appendChild(s);
    });
  }

  async function tryCreateClient(){
    try{
      if(typeof createClient === 'function'){
        const c = createClient('https://xglojvvbgaivwbpdxvne.supabase.co','public'); // clave "public" para test — no hace cambios
        setEl('clientStatus','Cliente creado (createClient) — OK','ok');
        logLine('[BOOT] createClient() existe — cliente creado (no se realizó llamada a BD).');
        return true;
      }
      if(window.supabase && typeof window.supabase.createClient === 'function'){
        const c = window.supabase.createClient('https://xglojvvbgaivwbpdxvne.supabase.co','public');
        setEl('clientStatus','Cliente creado (window.supabase) — OK','ok');
        logLine('[BOOT] window.supabase.createClient() existe — cliente creado (no se realizó llamada a BD).');
        return true;
      }
      setEl('clientStatus','No disponible — no se pudo crear cliente','err');
      logLine('[BOOT] No hay createClient disponible para crear un cliente.');
      return false;
    }catch(e){
      setEl('clientStatus','Error creando cliente: ' + (e.message||e),'err');
      logLine('[BOOT] Error al crear cliente: ' + e);
      return false;
    }
  }

  // ejecutar secuencia
  (async ()=>{
    const sdkOk = await loadSdk();
    const have = (typeof createClient === 'function') || (window.supabase && typeof window.supabase.createClient === 'function');
    setEl('createStatus', have ? 'Sí' : 'No', have ? 'ok' : 'err');
    await tryCreateClient();
    logLine('[BOOT] Diagnóstico finalizado.');
  })();

  // botones
  document.getElementById('btnRetry').addEventListener('click', async ()=>{
    out.textContent = '';
    setEl('sdkStatus','Reintentando...');
    logLine('[USER] Reintentar carga del SDK...');
    const ok = await loadSdk(6000);
    const have = (typeof createClient === 'function') || (window.supabase && typeof window.supabase.createClient === 'function');
    setEl('createStatus', have ? 'Sí' : 'No', have ? 'ok' : 'err');
    await tryCreateClient();
  });

  document.getElementById('btnConsole').addEventListener('click', ()=>{
    console.log('[USER] copiar texto de la caja de salida (out):\\n' + out.textContent);
    alert('Se han enviado logs a la consola. Mira la pestaña Console (F12).');
  });

  // también añadimos un timeout que indica si nada ocurre
  setTimeout(()=> {
    if(out.textContent.length === 0){
      out.textContent = '[BOOT] No se registraron logs (posible bloqueo de inline scripts).';
      setEl('jsStatus','Posible bloqueo de ejecución','err');
    }
  }, 1200);
})();
</script>
</body>
</html>
