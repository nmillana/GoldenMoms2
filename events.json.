<!doctype html>
<html lang="es">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Golden Moms ‚Äî Plantel (corregido)</title>
<link rel="icon" href="Logo.webp"/>
<style>
:root{
  --blue:#0f3a78; --lime:#9be22d; --mut:#64748b; --b:#e2e8f0; --bg:#f7f8fa;
}
*{box-sizing:border-box}
html,body{margin:0;background:var(--bg);color:#0f172a;font-family:Inter,system-ui,Segoe UI,Roboto,Arial}
.top{position:sticky;top:0;background:#fff;border-bottom:1px solid var(--b);display:flex;align-items:center;justify-content:space-between;padding:10px 14px;gap:12px}
.logo-wrap{display:flex;flex-direction:column;align-items:center;gap:4px;flex:0 0 56px}
.logo-wrap img{width:44px;height:44px;border-radius:50%;border:2px solid var(--blue)}
.team-name{font-size:11px;color:var(--lime);font-weight:800;text-align:center}
.nav{display:flex;gap:8px;align-items:center;flex:1;justify-content:flex-end}
.nav .tab{border:1px solid var(--b);border-radius:999px;padding:8px 12px;background:#fff;cursor:pointer}
.nav .tab.active{background:var(--blue);color:#fff}
.container{max-width:980px;margin:14px auto;padding:0 12px}
.card{background:#fff;border:1px solid var(--b);border-radius:12px;padding:12px}
.section-note{font-size:12px;color:var(--mut);margin-top:8px;border-left:3px solid #e6edf7;padding-left:8px}
#rosterGrid{display:grid;gap:10px;grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));margin-top:12px}
.player-card{padding:12px;border-radius:10px;border:1px solid var(--b);background:#fff;text-align:center;cursor:pointer;min-height:110px;display:flex;flex-direction:column;align-items:center;gap:8px}
.player-card:hover{transform: translateY(-4px); box-shadow:0 12px 24px rgba(0,0,0,0.06)}
.player-avatar{width:64px;height:64px;border-radius:50%;overflow:hidden;background:#f1f5f9;display:flex;align-items:center;justify-content:center}
.player-avatar img{width:100%;height:100%;object-fit:cover}
.player-apodo{font-weight:800;color:var(--blue)}
.player-nombre{font-size:12px;color:var(--mut)}
.btn{border:1px solid var(--b);border-radius:10px;padding:8px 12px;background:#fff;cursor:pointer}
.btn.p{background:var(--lime);border-color:#a3e635}
.modal-bg{position:fixed;inset:0;background:#0006;display:none;z-index:1200;justify-content:center;align-items:flex-start;padding-top:6vh}
.modal{width:min(880px,calc(100% - 24px));background:#fff;border-radius:12px;padding:16px;border:1px solid var(--b);max-height:90vh;overflow:auto}
.form-row{display:grid;grid-template-columns:1fr 1fr;gap:10px;margin-bottom:10px}
@media(max-width:800px){.form-row{grid-template-columns:1fr}}
.input,select,textarea{width:100%;padding:10px;border:1px solid var(--b);border-radius:8px}
.teams-list{display:flex;flex-wrap:wrap;gap:8px}
.team-chip{padding:6px 8px;border-radius:999px;border:1px solid var(--b);cursor:pointer;background:#fff;display:flex;align-items:center;gap:6px}
.team-chip input{margin:0}
.no-data{padding:16px;color:var(--mut);text-align:center}
.footer{padding:16px;text-align:center;color:var(--mut);font-size:12px}
.small-muted{font-size:12px;color:var(--mut)}
.alert{background:#fff1f0;border:1px solid #ffdddd;color:#9b1c1c;padding:8px;border-radius:8px;margin-bottom:12px}
</style>
</head>
<body>

<div class="top">
  <div style="display:flex;align-items:center;gap:10px">
    <div class="logo-wrap"><img src="Logo.webp" alt="GM"><div class="team-name">Golden <span style="color:var(--lime)">Moms</span></div></div>
  </div>
  <div class="nav" role="tablist">
    <button class="tab" data-view="dash">Dashboard</button>
    <button class="tab" data-view="events">Eventos</button>
    <button class="tab active" data-view="roster">Plantel</button>
    <button class="tab" data-view="matches">Partidos</button>
  </div>
</div>

<div class="container">
  <section id="v-roster">
    <div class="card">
      <h4>Plantel</h4>
      <div class="section-note">Listado sincronizado con Supabase (tabla <code>players</code>). Ordenado por apodo.</div>

      <div style="display:flex;justify-content:space-between;align-items:center;margin-top:8px">
        <div class="small-muted">Haz clic en una jugadora para ver/editar su ficha. Puedes subir foto (se guardar√° en Storage).</div>
        <div><button id="btnAddPlayer" class="btn">Agregar jugadora</button></div>
      </div>

      <div id="rosterGrid"></div>
    </div>
  </section>

  <section id="v-events" style="display:none"><div class="card"><h4>Eventos</h4><div class="no-data">(Secci√≥n eventos)</div></div></section>
  <section id="v-dash" style="display:none"><div class="card"><h4>Dashboard</h4><div class="no-data">(Secci√≥n dashboard)</div></div></section>
  <section id="v-matches" style="display:none"><div class="card"><h4>Partidos</h4><div class="no-data">(Secci√≥n partidos)</div></div></section>
</div>

<div class="footer">Golden Moms ¬∑ hecho con üíö lima & azul</div>

<!-- Modal -->
<div class="modal-bg" id="playerModalBg" aria-hidden="true">
  <div class="modal" role="dialog" id="playerModal">
    <h3 id="playerModalTitle">Ficha</h3>

    <div style="display:flex;gap:12px;align-items:flex-start;margin-bottom:8px;flex-wrap:wrap">
      <div style="width:120px;height:120px;border-radius:8px;overflow:hidden;background:#f7f9fb;border:1px dashed var(--b);display:flex;align-items:center;justify-content:center" id="playerPhotoPreview" aria-hidden="true"></div>
      <div style="flex:1;min-width:200px">
        <div style="margin-bottom:8px">
          <label for="p_foto">Foto (URL)</label>
          <input id="p_foto" name="foto" class="input" placeholder="https://...">
        </div>
        <div style="margin-bottom:8px">
          <label for="p_file">Foto (archivo)</label>
          <input id="p_file" name="file" type="file" accept="image/*" class="input">
        </div>
      </div>
    </div>

    <div class="form-row">
      <div><label for="p_nombre">Nombre completo</label><input id="p_nombre" name="nombre" class="input" autocomplete="name"></div>
      <div><label for="p_apodo">Apodo</label><input id="p_apodo" name="apodo" class="input" autocomplete="nickname"></div>
    </div>

    <div class="form-row">
      <div><label for="p_numero">N√∫mero camiseta</label><input id="p_numero" name="numero_camiseta" type="number" min="0" step="1" class="input" placeholder="ej: 11"></div>
      <div><label for="p_rol">Rol</label><input id="p_rol" name="rol" class="input" placeholder="ej: jugadora"></div>
    </div>

    <div class="form-row">
      <div><label for="p_nacimiento">Fecha de nacimiento</label><input id="p_nacimiento" name="fecha_nacimiento" type="date" class="input"></div>
      <div><label for="p_emergencia">Tel√©fono emergencia</label><input id="p_emergencia" name="Telefono_emergencia" class="input" placeholder="+56 9 ..."></div>
    </div>

    <div class="form-row">
      <div><label for="p_seguro">Seguro m√©dico</label><input id="p_seguro" name="Seguro_Medico" class="input"></div>
      <div>
        <label>Equipos (selecciona 1 o m√°s)</label>
        <div class="teams-list" id="teamsList" role="group" aria-label="Equipos disponibles"></div>
      </div>
    </div>

    <div style="display:flex;justify-content:flex-end;gap:8px;margin-top:8px">
      <button id="btnDeletePlayer" class="btn" style="display:none">Eliminar</button>
      <button id="btnClosePlayer" class="btn">Cerrar</button>
      <button id="btnSavePlayer" class="btn p">Guardar</button>
    </div>
  </div>
</div>

<!-- Supabase client (JSDELIVR CDN). Si est√° bloqueado descarga y sirve localmente) -->
<script>
/* ---------- CONFIG ---------- */
const SUPA = {
  url: "https://xglojvvbgaivwbpdxvne.supabase.co",
  key: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhnbG9qdnZiZ2FpdndicGR4dm5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUxMjEzMjQsImV4cCI6MjA3MDY5NzMyNH0.vQOBuvphgm0iue-lybJoBVhyai7RtRp8Tfn-hGIKKgw"
};
const BUCKET_NAME = 'player-photos'; // revisa que este bucket exista

/* ---------- SDK init helper (carga script si hace falta) ---------- */
let supa = null;
async function initSupabase(timeoutMs = 8000){
  try{
    if(typeof createClient === 'function'){ supa = createClient(SUPA.url, SUPA.key); return supa; }
    if(window.supabase && typeof window.supabase.createClient === 'function'){ supa = window.supabase.createClient(SUPA.url, SUPA.key); return supa; }

    await new Promise((resolve,reject)=>{
      const s = document.createElement('script');
      s.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/dist/supabase.min.js';
      s.async = true;
      let done = false;
      const to = setTimeout(()=>{ if(!done){ done = true; reject(new Error('timeout cargando supabase')); }}, timeoutMs);
      s.onload = ()=>{ if(done) return; done = true; clearTimeout(to); resolve(); };
      s.onerror = ()=>{ if(done) return; done = true; clearTimeout(to); reject(new Error('error cargando supabase')); };
      document.head.appendChild(s);
    });

    if(typeof createClient === 'function'){ supa = createClient(SUPA.url, SUPA.key); return supa; }
    if(window.supabase && typeof window.supabase.createClient === 'function'){ supa = window.supabase.createClient(SUPA.url, SUPA.key); return supa; }
    throw new Error('SDK cargado pero no se encontr√≥ createClient');
  }catch(err){
    console.error('initSupabase error:', err);
    supa = null;
    return null;
  }
}

/* ---------- small helpers ---------- */
function pad(n){ return n.toString().padStart(2,'0'); }
function localDateYMD(d){ if(!d) return ''; const D = new Date(d); return `${D.getFullYear()}-${pad(D.getMonth()+1)}-${pad(D.getDate())}`; }
function escapeHtml(s){ if(!s && s!==0) return ''; return String(s).replace(/[&<>"]/g,c=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[c])); }
function parseTeamsField(v){
  if(!v) return [];
  if(Array.isArray(v)) return v;
  if(typeof v === 'string'){
    try{ const parsed = JSON.parse(v); if(Array.isArray(parsed)) return parsed; }catch(e){}
    return v.split(',').map(x=>x.trim()).filter(Boolean);
  }
  return [];
}
function avatarOrPlaceholder(url, name){
  if(url) return url;
  const initials = (name||'').split(' ').map(w=>w[0]).slice(0,2).join('').toUpperCase() || 'GM';
  const svg = `<svg xmlns='http://www.w3.org/2000/svg' width='160' height='160'><rect width='100%' height='100%' fill='#f1f5f9'/><text x='50%' y='50%' dominant-baseline='middle' text-anchor='middle' font-family='Arial' font-size='48' fill='#64748b'>${escapeHtml(initials)}</text></svg>`;
  return 'data:image/svg+xml;utf8,' + encodeURIComponent(svg);
}

/* ---------- DOM refs ---------- */
const rosterGrid = document.getElementById('rosterGrid');
const btnAddPlayer = document.getElementById('btnAddPlayer');
const playerModalBg = document.getElementById('playerModalBg');
const playerModal = document.getElementById('playerModal');
const playerModalTitle = document.getElementById('playerModalTitle');
const playerPhotoPreview = document.getElementById('playerPhotoPreview');

const p_foto = document.getElementById('p_foto');
const p_file = document.getElementById('p_file');
const p_nombre = document.getElementById('p_nombre');
const p_apodo = document.getElementById('p_apodo');
const p_numero = document.getElementById('p_numero');
const p_rol = document.getElementById('p_rol');
const p_nacimiento = document.getElementById('p_nacimiento');
const p_emergencia = document.getElementById('p_emergencia');
const p_seguro = document.getElementById('p_seguro');
const teamsList = document.getElementById('teamsList');

const btnClosePlayer = document.getElementById('btnClosePlayer');
const btnSavePlayer = document.getElementById('btnSavePlayer');
const btnDeletePlayer = document.getElementById('btnDeletePlayer');

const TEAM_OPTIONS = ["Golden Moms","Golden Power","Golden Dream"];

let playersCache = [];
let currentEditing = null;
let playerTableCols = null; // se detecta din√°micamente

/* ---------- storage upload ---------- */
async function uploadFileToStorage(file){
  if(!file) return null;
  if(!supa) throw new Error('Supabase no inicializado (storage).');
  const ext = file.name.split('.').pop();
  const path = `players/${Date.now()}_${Math.random().toString(36).slice(2)}.${ext}`;
  const { data, error } = await supa.storage.from(BUCKET_NAME).upload(path, file, { upsert: true });
  if(error){ console.error('Upload error', error); throw error; }
  const { publicUrl, error: urlErr } = supa.storage.from(BUCKET_NAME).getPublicUrl(path);
  if(urlErr){ console.warn('getPublicUrl err', urlErr); return null; }
  return publicUrl.publicUrl || publicUrl;
}

/* ---------- detect columns (important) ---------- */
async function detectPlayerColumns(){
  try{
    if(!supa) { console.warn('detectPlayerColumns: supabase no inicializado'); return null; }
    // Intentamos leer una fila para inferir columnas
    const { data, error } = await supa.from('players').select().limit(1);
    if(error){
      console.warn('detectPlayerColumns supabase error', error);
      // fallback razonable (ajustar si tu tabla usa nombres distintos)
      playerTableCols = ['id','nombre','apodo','numero_camiseta','fecha_nacimiento','equipos','rol','Telefono_emergencia','Seguro_Medico','foto','created_at'];
      return playerTableCols;
    }
    const row = (data && data[0]) || {};
    const keys = Object.keys(row);
    playerTableCols = keys.length ? keys : ['id','nombre','apodo','numero_camiseta','fecha_nacimiento','equipos','rol','Telefono_emergencia','Seguro_Medico','foto','created_at'];
    console.log('playerTableCols detected:', playerTableCols);
    return playerTableCols;
  }catch(err){
    console.warn('detectPlayerColumns err', err);
    playerTableCols = ['id','nombre','apodo','numero_camiseta','fecha_nacimiento','equipos','rol','Telefono_emergencia','Seguro_Medico','foto','created_at'];
    return playerTableCols;
  }
}

/* ---------- fetch + render ---------- */
async function fetchPlayers(){
  rosterGrid.innerHTML = '<div class="no-data">Cargando jugadoras‚Ä¶</div>';
  try{
    if(!supa){ console.warn('fetchPlayers: supabase no inicializado'); rosterGrid.innerHTML = '<div class="no-data">SDK Supabase no disponible (ver consola)</div>'; return []; }
    const { data, error } = await supa.from('players').select('*').order('apodo',{ascending:true});
    if(error){ console.error('fetchPlayers error', error); rosterGrid.innerHTML = '<div class="no-data">Error cargando jugadoras. Revisa consola.</div>'; return []; }
    playersCache = (data || []).map(p => ({ ...p, equipos: parseTeamsField(p.equipos || p.teams || p.equipo) }));
    if(!playerTableCols) await detectPlayerColumns();
    renderRoster(playersCache);
    return playersCache;
  }catch(err){
    console.error('fetchPlayers err', err);
    rosterGrid.innerHTML = '<div class="no-data">No se pudieron cargar jugadoras. Revisa consola.</div>';
    return [];
  }
}

function renderRoster(list){
  rosterGrid.innerHTML = '';
  if(!list || list.length === 0){ rosterGrid.innerHTML = '<div class="no-data">No hay jugadoras registradas.</div>'; return; }
  const sorted = (list || []).slice().sort((a,b)=> (a.apodo||'').toLowerCase().localeCompare((b.apodo||'').toLowerCase()));
  for(const p of sorted){
    const card = document.createElement('div'); card.className='player-card';
    card.dataset.id = p.id || '';
    const av = document.createElement('div'); av.className='player-avatar';
    const img = document.createElement('img'); img.src = avatarOrPlaceholder(p.foto || p.photo || '', p.apodo || p.nombre); img.alt = p.apodo || p.nombre || '';
    av.appendChild(img);
    const ap = document.createElement('div'); ap.className='player-apodo'; ap.textContent = p.apodo || (p.nombre||'').split(' ')[0] || 'Sin apodo';
    const nm = document.createElement('div'); nm.className='player-nombre'; nm.textContent = p.nombre || '';
    card.appendChild(av); card.appendChild(ap); card.appendChild(nm);
    card.onclick = ()=> openPlayerModal(p);
    rosterGrid.appendChild(card);
  }
}

/* ---------- Teams UI ---------- */
function renderTeamsUI(selected=[]){
  teamsList.innerHTML = '';
  for(const t of TEAM_OPTIONS){
    const label = document.createElement('label'); label.className='team-chip';
    const cb = document.createElement('input'); cb.type='checkbox'; cb.value=t; cb.name = 'equipos'; // <-- name agregado
    cb.style.display='none';
    cb.checked = selected.includes(t);
    label.appendChild(cb);
    const span = document.createElement('span'); span.textContent = t; label.appendChild(span);
    label.style.background = cb.checked ? '#eaffd6' : '#fff';
    label.addEventListener('click', (ev)=>{ ev.preventDefault(); cb.checked = !cb.checked; label.style.background = cb.checked ? '#eaffd6' : '#fff'; });
    teamsList.appendChild(label);
  }
}
function getSelectedTeamsFromUI(){ return Array.from(teamsList.querySelectorAll('input[type=checkbox][name="equipos"]')).filter(i=>i.checked).map(i=>i.value); }

/* ---------- modal ---------- */
function setPhotoPreview(url){
  playerPhotoPreview.innerHTML = '';
  const img = document.createElement('img'); img.style.width='100%'; img.style.height='100%'; img.style.objectFit='cover';
  img.src = avatarOrPlaceholder(url, p_apodo.value || p_nombre.value);
  playerPhotoPreview.appendChild(img);
}

function openPlayerModal(player){
  currentEditing = player ? {...player} : null;
  playerModalTitle.textContent = player ? `Ficha ‚Äî ${player.apodo || player.nombre || ''}` : 'Agregar jugadora';
  btnDeletePlayer.style.display = player && player.id ? '' : 'none';

  p_foto.value = player?.foto || player?.photo || '';
  // reset file input safely
  try{ p_file.value = ''; }catch(e){ /* algunos navegadores controlan file inputs */ }
  p_nombre.value = player?.nombre || '';
  p_apodo.value = player?.apodo || '';
  p_numero.value = (player?.numero_camiseta ?? player?.numero ?? player?.number ?? '') + '';
  p_rol.value = player?.rol || player?.gm_role || '';
  p_nacimiento.value = player?.fecha_nacimiento ? (player.fecha_nacimiento.split ? player.fecha_nacimiento.split('T')[0] : player.fecha_nacimiento) : '';
  p_emergencia.value = player?.Telefono_emergencia || player?.telefono_emergencia || player?.telefono || '';
  p_seguro.value = player?.Seguro_Medico || player?.seguro_medico || player?.seguro || '';

  renderTeamsUI(parseTeamsField(player?.equipos || player?.teams || player?.equipo || []));
  setPhotoPreview(p_foto.value || '');
  playerModalBg.style.display = 'flex';
  playerModalBg.setAttribute('aria-hidden','false');
}

function closePlayerModal(){ playerModalBg.style.display = 'none'; playerModalBg.setAttribute('aria-hidden','true'); currentEditing = null; }

/* ---------- save (filtrado por columnas reales + retry inteligente) ---------- */
async function savePlayer(){
  try{
    let fotoUrl = (p_foto.value || '').trim() || null;
    if(p_file.files && p_file.files[0]){
      try{ fotoUrl = await uploadFileToStorage(p_file.files[0]); p_foto.value = fotoUrl || ''; }catch(e){ alert('Error subiendo la foto. Revisa consola.'); console.error(e); }
    }

    const raw = {
      nombre: (p_nombre.value || '').trim(),
      apodo: (p_apodo.value || '').trim(),
      numero_camiseta: (p_numero.value || '').trim() ? (isNaN(Number(p_numero.value.trim())) ? null : Number(p_numero.value.trim())) : null,
      fecha_nacimiento: p_nacimiento.value || null,
      Telefono_emergencia: (p_emergencia.value || '').trim() || null,
      Seguro_Medico: (p_seguro.value || '').trim() || null,
      foto: fotoUrl || null,
      rol: (p_rol.value || '').trim() || null,
      equipos: getSelectedTeamsFromUI()
    };

    if(!playerTableCols) await detectPlayerColumns();
    const colSet = new Set(playerTableCols || []);
    // Intenta mapear variantes comunes de nombre de columna
    const altNames = {
      'numero_camiseta': ['numero_camiseta','numero','number','nro'],
      'Telefono_emergencia': ['Telefono_emergencia','telefono_emergencia','telefono','phone','celular'],
      'Seguro_Medico': ['Seguro_Medico','seguro_medico','seguro']
    };
    // Build payload preferring an existing column name if present
    const payload = {};
    for(const [k,v] of Object.entries(raw)){
      if(k === 'equipos'){
        // equipos normalmente array -> si hay columna 'equipos' o 'teams' usa la que exista
        if(colSet.has('equipos')) payload['equipos'] = Array.isArray(v) ? v : parseTeamsField(v);
        else if(colSet.has('teams')) payload['teams'] = Array.isArray(v) ? v : parseTeamsField(v);
        else {
          // tentativa: if table has any alt column like 'equipo' use that
          if(colSet.has('equipo')) payload['equipo'] = Array.isArray(v) ? v : parseTeamsField(v);
        }
        continue;
      }
      // Si el nombre directo existe en el schema, lo usamos
      if(colSet.has(k)){
        if(k === 'numero_camiseta') payload[k] = (v === null ? null : (isNaN(Number(v)) ? null : Number(v)));
        else payload[k] = v;
        continue;
      }
      // si no existe, buscamos alternativas conocidas
      let found = false;
      for(const alt of (altNames[k]||[])){
        if(colSet.has(alt)){
          if(alt === 'numero_camiseta') payload[alt] = (v === null ? null : (isNaN(Number(v)) ? null : Number(v)));
          else payload[alt] = v;
          found = true; break;
        }
      }
      if(!found){
        // No hay columna conocida -> omitimos (ser√° manejado por retry inteligente si supabase reclama)
      }
    }

    console.log('Payload inicial (filtrado):', payload);

    if(!payload.nombre || !payload.apodo){
      alert('Completa Nombre y Apodo');
      return;
    }
    if(!supa){ alert('No conectado a Supabase. Revisa consola.'); return; }

    // Intento de guardar con manejo de error por columnas desconocidas: si supabase responde "Could not find the 'X' column"
    async function trySaveOnce(payloadObj){
      try{
        if(currentEditing && currentEditing.id){
          const { data, error } = await supa.from('players').update(payloadObj).eq('id', currentEditing.id).select();
          if(error) return { error, data:null };
          return { data, error:null };
        } else {
          const { data, error } = await supa.from('players').insert([payloadObj]).select();
          if(error) return { error, data:null };
          return { data, error:null };
        }
      }catch(e){
        return { error: e, data:null };
      }
    }

    // retry loop: hasta 3 intentos, eliminando la columna que supabase reporte como inexistente
    let attempt = 0;
    let currentPayload = {...payload};
    while(attempt < 3){
      attempt++;
      console.log('Intento guardado', attempt, currentPayload);
      const res = await trySaveOnce(currentPayload);
      if(!res.error){
        console.log('Save OK', res.data);
        await fetchPlayers();
        closePlayerModal();
        return;
      }
      // si error es de supabase con hint indicando columna faltante, parseamos y retry sin esa columna
      const err = res.error;
      console.error('Save intento error', err);
      const msg = (err.message || err.error || '').toString();
      const details = (err.details || '').toString();
      // ejemplo de texto: "Could not find the 'numero' column of 'players' in the schema cache"
      const rx = /Could not find the '([^']+)' column/i;
      const m = rx.exec(details) || rx.exec(msg);
      if(m && m[1]){
        const badCol = m[1];
        console.warn('Supabase reclama columna inexistente:', badCol, '-> la eliminamos y reintentamos');
        if(badCol in currentPayload) delete currentPayload[badCol];
        // tambi√©n eliminar variantes similares por si la columna ven√≠a en diferentes key
        const altToRemove = Object.keys(currentPayload).filter(k=>k.toLowerCase() === badCol.toLowerCase());
        for(const a of altToRemove) delete currentPayload[a];
        // continue loop para reintentar
        continue;
      } else {
        // si no podemos detectar la columna problem√°tica, informar y abortar
        alert('Error al guardar: ' + (err.message || JSON.stringify(err)));
        return;
      }
    }

    alert('No se pudo guardar despu√©s de varios intentos. Revisa consola para m√°s detalles.');
  }catch(err){
    console.error('savePlayer err', err);
    alert('Error guardando. Revisa consola.');
  }
}

/* ---------- delete ---------- */
async function deletePlayer(){
  if(!currentEditing || !currentEditing.id) return;
  if(!confirm('Eliminar jugadora?')) return;
  if(!supa){ alert('No conectado a Supabase.'); return; }
  try{
    const { error } = await supa.from('players').delete().eq('id', currentEditing.id);
    if(error) throw error;
    await fetchPlayers();
    closePlayerModal();
  }catch(err){ console.error('delete err', err); alert('Error eliminando. Revisa consola.'); }
}

/* ---------- UI wiring ---------- */
btnAddPlayer.addEventListener('click', ()=> openPlayerModal(null));
btnClosePlayer.addEventListener('click', closePlayerModal);
btnSavePlayer.addEventListener('click', savePlayer);
btnDeletePlayer.addEventListener('click', deletePlayer);
playerModalBg.addEventListener('click',(e)=>{ if(e.target === playerModalBg) closePlayerModal(); });
p_foto.addEventListener('input', ()=> setPhotoPreview(p_foto.value || ''));

/* tabs navigation + persist view */
function persistView(view){ try{ localStorage.setItem('gm_view', view); }catch(e){} }
function getPersistedView(){ try{ return localStorage.getItem('gm_view'); }catch(e){ return null; } }

document.querySelectorAll('.nav .tab').forEach(btn=>{ btn.addEventListener('click', async ()=>{ document.querySelectorAll('.nav .tab').forEach(b=>b.classList.remove('active')); btn.classList.add('active'); const view = btn.dataset.view; persistView(view); document.querySelectorAll('section[id^="v-"]').forEach(s => s.style.display = 'none'); const sec = document.getElementById('v-'+view); if(sec) sec.style.display = 'block'; if(view === 'roster') await fetchPlayers(); if(view === 'dash') renderDash(); if(view === 'events') renderEvents(); }); });

/* ---------- small dashboard placeholders ---------- */
async function renderDash(){ /* Puedes completar si quieres contenido din√°mico en dashboard */ }

/* ---------- bootstrapping ---------- */
document.addEventListener('DOMContentLoaded', async ()=>{
  await initSupabase();
  if(supa) {
    try{ supa = supabase.createClient(SUPA.url, SUPA.key); console.log('Supabase inicializado correctamente.'); }catch(e){ console.warn('SDK ya cargado o conflicto', e); }
  } else console.warn('Supabase no inicializado. Revisa CDN/CSP/adblock.');

  // preparar UI equipos
  renderTeamsUI([]);

  // decide view inicial
  const persisted = getPersistedView();
  const activeTab = document.querySelector('.nav .tab.active');
  const initialView = persisted || (activeTab ? activeTab.dataset.view : 'roster');
  document.querySelectorAll('.nav .tab').forEach(b=>b.classList.remove('active'));
  const btnToActivate = document.querySelector(`.nav .tab[data-view="${initialView}"]`);
  if(btnToActivate) btnToActivate.classList.add('active');

  // mostrar la vista
  document.querySelectorAll('section[id^="v-"]').forEach(s => s.style.display = 'none');
  const sec = document.getElementById('v-'+initialView);
  if(sec) sec.style.display = 'block';

  // detect columns y fetch roster solo si corresponde
  if(initialView === 'roster') {
    await detectPlayerColumns();
    await fetchPlayers();
  }
});
</script>
</body>
</html>
